{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","serviceWorkerRegistration.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","CounterButton","updateCount","setState","state","count","console","log","color","this","onClick","PureComponent","Header","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"0QAeeA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,gCACE,6BAAKF,IACL,4BAAIC,WCaGK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,cAAC,EAAD,CAEER,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCMJC,EAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,qBAAKV,UAAU,MAAf,SACE,uBACEW,aAAa,gBACbX,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUJ,OCAHK,EARA,SAACC,GACd,OACE,qBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACGJ,EAAMK,YCLAC,G,MAAsB,uBAEtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBC4BtBC,E,kDA7BX,aAAe,IAAD,8BACV,gBAaJC,YAAc,WACV,EAAKC,UAAS,SAAAC,GACV,MAAO,CAACC,MAAOD,EAAMC,MAAQ,OAdjC,EAAKD,MAAQ,CACTC,MAAO,GAHD,E,0CAmBd,WAEI,OADAC,QAAQC,IAAI,iBAER,yBAAQC,MAAOC,KAAKlB,MAAMiB,MAAOE,QAASD,KAAKP,YAA/C,oBACYO,KAAKL,MAAMC,a,GAxBPM,iBCebC,E,4JAVX,WACI,OACI,gCACC,oBAAIrC,UAAU,KAAd,yBACA,cAAC,EAAD,CAAeiC,MAAO,e,GARdK,aCsBfC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKV,MAAQ,CACXzB,OAAQ,IAHE,E,qDAOd,WACE8B,KAAKlB,MAAMwB,oB,oBAGb,WAAU,IAAD,EACkDN,KAAKlB,MAAvDyB,EADA,EACAA,YAAaC,EADb,EACaA,eAAgBtC,EAD7B,EAC6BA,OAAQuC,EADrC,EACqCA,UACtCC,EAAiBxC,EAAOyC,QAAO,SAAAC,GACnC,OAAOA,EAAMjD,KAAKkD,cAAcC,SAASP,EAAYM,kBAEvD,OAAOJ,EACL,yCAEE,sBAAK3C,UAAU,KAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWU,aAAcgC,IACzB,cAAC,EAAD,UACE,cAAC,EAAD,CAAUtC,OAAQwC,a,GAxBZN,aA+BHW,eA/CS,SAAApB,GACtB,MAAO,CACLY,YAAaZ,EAAMqB,aAAaT,YAChCrC,OAAQyB,EAAMsB,cAAc/C,OAC5BuC,UAAWd,EAAMsB,cAAcR,UAC/BS,MAAOvB,EAAMsB,cAAcC,UAIJ,SAACC,GAC1B,MAAO,CACLX,eAAgB,SAACY,GAAD,OAAWD,GCZCE,EDYuBD,EAAME,OAAOC,MCZ1B,CACtC7C,KAAMU,EACNoC,QAASH,KAFkB,IAACA,GDa5Bf,gBAAiB,kBAAMa,GCRQ,SAACA,GAChCA,EAAS,CAACzC,KAAMW,IAChBoC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAIV,EAAS,CAACzC,KAAMY,EAAwBkC,QAASK,OAC9DC,OAAM,SAAAZ,GAAK,OAAIC,EAAS,CAACzC,KAAMa,EAAuBiC,QAASN,cDsCvDH,CAA6CV,GE5CtD0B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTZ,MAAK,SAACiB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlD,QACf6C,UAAUC,cAAcO,YAI1BnD,QAAQC,IACN,+GAKEyC,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB9C,QAAQC,IAAI,sCAGRyC,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5Bb,OAAM,SAACZ,GACNrB,QAAQqB,MAAM,4CAA6CA,MC9FjE,IAYeiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCARO,EAAoB,CACtBpD,YAAa,IAYXqD,EAAoB,CACtBnD,WAAW,EACXvC,OAAQ,GACRgD,MAAO,ICVL2C,G,MAASC,0BACTC,EAAcC,YAAgB,CAAChD,aDHT,WAA2C,IAA1CrB,EAAyC,uDAAjCgE,EAAmBM,EAAc,uDAAP,GAC3D,OAAOA,EAAOvF,MACV,KAAKU,EACL,OAAO8E,OAAOC,OAAO,GAAIxE,EAAO,CAACY,YAAa0D,EAAOzC,UACrD,QACI,OAAO7B,ICFgCsB,cDYtB,WAA2C,IAA1CtB,EAAyC,uDAAjCiE,EAAmBK,EAAc,uDAAP,GAC5D,OAAOA,EAAOvF,MACV,KAAKW,EACJ,OAAO6E,OAAOC,OAAO,GAAIxE,EAAO,CAACc,WAAW,IAC7C,KAAKnB,EACJ,OAAO4E,OAAOC,OAAO,GAAIxE,EAAO,CAACzB,OAAQ+F,EAAOzC,QAASf,WAAW,IACrE,KAAKlB,EACJ,OAAO2E,OAAOC,OAAO,GAAIxE,EAAO,CAACuB,MAAO+C,EAAOzC,QAASf,WAAW,IACpE,QACI,OAAOd,MCpBbyE,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAAC,EAAD,MACSM,SAASC,eAAe,SHAlC,SAAkBpC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoC,IAAIC,iBAAwB5C,OAAOC,SAAS4C,MACpDC,SAAW9C,OAAOC,SAAS6C,OAIvC,OAGF9C,OAAO+C,iBAAiB,QAAQ,WAC9B,IAAM1C,EAAK,UAAMuC,iBAAN,sBAEP9C,IAgEV,SAAiCO,EAAOC,GAEtCd,MAAMa,EAAO,CACX2C,QAAS,CAAE,iBAAkB,YAE5BvD,MAAK,SAACC,GAEL,IAAMuD,EAAcvD,EAASsD,QAAQE,IAAI,gBAEnB,MAApBxD,EAASyD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7C,UAAUC,cAAc6C,MAAM5D,MAAK,SAACiB,GAClCA,EAAa4C,aAAa7D,MAAK,WAC7BO,OAAOC,SAASsD,eAKpBnD,EAAgBC,EAAOC,MAG1BT,OAAM,WACLjC,QAAQC,IAAI,oEAtFV2F,CAAwBnD,EAAOC,GAI/BC,UAAUC,cAAc6C,MAAM5D,MAAK,WACjC7B,QAAQC,IACN,+GAMJuC,EAAgBC,EAAOC,OGxB/BmD,GAKAvC,M","file":"static/js/main.8df02913.chunk.js","sourcesContent":["  \r\nimport React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label = \"Search Robots\"\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {PureComponent} from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //    if (this.state.count !== nextState.count){\r\n    //        return true\r\n    //    }\r\n    //    return false\r\n    // }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: state.count + 1}\r\n        })\r\n    }\r\n    render() {\r\n        console.log('CounterButton')\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false;\r\n    // }\r\n    render() {\r\n        return (\r\n            <div>    \r\n             <h1 className='f1'>RoboFriends</h1>\r\n             <CounterButton color={'red'} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport {requestRobots, setSearchField}  from '../actions';\r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const {searchField, onSearchChange, robots, isPending} = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import CardList from '../components/CardList';\r\n// import SearchBox from '../components/SearchBox';\r\n// import Scroll from '../components/Scroll';\r\n// import './App.css';\r\n// function App () {\r\n//   const [robots, setRobots] = useState([]);\r\n//   const [searchfield, setSearchfield] = useState('');\r\n   \r\n//   useEffect(() => {\r\n//     fetch('https://jsonplaceholder.typicode.com/users')\r\n//     .then(response=> response.json())\r\n//     .then(users => {setRobots(users)});\r\n//   }, [])\r\n\r\n\r\n//   const onSearchChange = (event) => {\r\n//     setSearchfield(event.target.value)\r\n//   }\r\n\r\n//     const filteredRobots = robots.filter(robot =>{\r\n//       return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n//     })\r\n//     return !robots.length ?\r\n//       <h1>Loading</h1> :\r\n//       (\r\n//         <div className='tc'>\r\n//           <h1 className='f1'>RoboFriends</h1>\r\n//           <SearchBox searchChange={onSearchChange}/>\r\n//           <Scroll>\r\n//             <CardList robots={filteredRobots} />\r\n//           </Scroll>\r\n//         </div>\r\n//       );\r\n// }\r\n\r\n// export default App;","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n\r\nexport const setSearchField  = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n      .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst intialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = intialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n        return Object.assign({}, state, {searchField: action.payload});\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst intialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = intialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n         return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n         return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n         return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n            return state;        \r\n\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'; \r\nimport {createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {searchRobots, requestRobots} from './reducers';\r\nimport 'tachyons'; \r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}